{"version":3,"sources":["../../src/controller/alaska_airports.js"],"names":["config","require","auth","geodist","file_details","module","exports","register_user","req","res","next","detail","username","query","password","save","err","data","console","log","status","json","error","message","login","findOne","users_data","payload","id","_id","token","sign","secret","get_airports","headers","Autherization","readFile","JSON","parse","find_distance","response","airport_one_location","airport_location_one","airport_two_location","airport_location_two","found_first_airport","found_second_airport","airports_details","forEach","airport","airport_location","LocationID","lat1","Lat","lon1","Lon","lat2","lon2","distance","lat","lon","three_nearest_airport","airport_name","fecility_name","airport_details","found_airport","airport_data","Facility_Name","FacilityName","airports_distance","push","nearest_three","sort","a","b","slice"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAIA,SAASC,QAAQ,sBAAR,CAAb;AACA,IAAIC,OAAOD,QAAQ,iCAAR,CAAX;AACA,IAAIE,UAAUF,QAAQ,SAAR,CAAd;AACA,IAAIG,eAAe,yBAAnB;AACAC,OAAOC,OAAP,GAAiB;AACbC,mBAAe,uBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,YAAIC,SAAS,IAAI,aAAGJ,aAAP,CAAqB;AAC9BK,sBAAUJ,IAAIK,KAAJ,CAAUD,QADU;AAE9BE,sBAAUN,IAAIK,KAAJ,CAAUC;AAFU,SAArB,CAAb;AAIAH,eAAOI,IAAP,CAAY,UAASC,GAAT,EAAcC,IAAd,EAAoB;AAC5B,gBAAID,GAAJ,EAAS;AACLE,wBAAQC,GAAR,CAAYH,GAAZ;AACAP,oBAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,CAAT,EAAYC,SAAS,mBAArB,EAArB;AACH,aAHD,MAIId,IAAIY,IAAJ,CAAS,EAAEC,OAAO,CAAT,EAAYC,SAAS,iBAArB,EAAwCN,MAAMA,IAA9C,EAAT;AACP,SAND;AAOH,KAbY;AAcbO,WAAO,eAAChB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvB,qBAAGH,aAAH,CAAiBkB,OAAjB,CAAyB,EAAEb,UAAUJ,IAAIK,KAAJ,CAAUD,QAAtB,EAAgCE,UAAUN,IAAIK,KAAJ,CAAUC,QAApD,EAAzB,EAAyF,UAASE,GAAT,EAAcU,UAAd,EAA0B;AAC/G,gBAAIV,GAAJ,EAAS;AACLP,oBAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,CAAT,EAAYC,SAAS,yBAArB,EAArB;AACH,aAFD,MAEO,IAAIG,UAAJ,EAAgB;AACnB,oBAAIC,UAAU,EAAEC,IAAIF,WAAWG,GAAjB,EAAd;AACA,oBAAIC,QAAQ,uBAAIC,IAAJ,CAASJ,OAAT,EAAkB3B,OAAOgC,MAAzB,CAAZ;AACAvB,oBAAIY,IAAJ,CAAS,EAAEE,SAAS,iBAAX,EAA8BO,OAAOA,KAArC,EAAT;AACH,aAJM,MAIA;AACHrB,oBAAIY,IAAJ,CAAS,EAAEC,OAAO,CAAT,EAAYC,SAAS,+BAArB,EAAT;AACH;AACJ,SAVD;AAWH,KA1BY;AA2BbU,kBAAc,sBAACzB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9BQ,gBAAQC,GAAR,CAAYX,IAAI0B,OAAJ,CAAYC,aAAxB;AACA,6BAAGC,QAAH,CAAYhC,YAAZ,EAA0B,UAACY,GAAD,EAAMC,IAAN,EAAe;AACrC,gBAAID,GAAJ,EAASN,KAAKM,GAAL;AACTP,gBAAIY,IAAJ,CAAS;AACLC,uBAAO,CADF;AAELC,yBAAS,kBAFJ;AAGLN,sBAAMoB,KAAKC,KAAL,CAAWrB,IAAX;AAHD,aAAT;AAKH,SAPD;AAQH,KArCY;AAsCbsB,mBAAe,uBAAC/B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,YAAI8B,iBAAJ;AACA,6BAAGJ,QAAH,CAAYhC,YAAZ,EAA0B,UAACY,GAAD,EAAMC,IAAN,EAAe;AACrC,gBAAID,GAAJ,EAASN,KAAKM,GAAL,EAAT,KACK;AACD,oBAAIyB,uBAAuBjC,IAAIK,KAAJ,CAAU6B,oBAArC;AACA,oBAAIC,uBAAuBnC,IAAIK,KAAJ,CAAU+B,oBAArC;AACA,oBAAIC,mBAAJ;AACA,oBAAIC,oBAAJ;AACA,oBAAIC,mBAAmBV,KAAKC,KAAL,CAAWrB,IAAX,CAAvB;AACA,iCAAE+B,OAAF,CAAUD,gBAAV,EAA4B,UAASE,OAAT,EAAkB;AAC1C,wBAAIC,mBAAmBD,QAAQE,UAA/B;AACA,wBAAID,oBAAoBT,oBAAxB,EAA8C;AAC1CI,8CAAsBI,OAAtB;AACH;AACD,wBAAIC,oBAAoBP,oBAAxB,EAA8C;AAC1CG,+CAAuBG,OAAvB;AACH;AACJ,iBARD;AASA,oBAAI,CAACJ,mBAAD,IAAwB,CAACC,oBAA7B,EAAmD;AAC/CrC,wBAAIY,IAAJ,CAAS;AACLC,+BAAO,CADF;AAELC,iCAAS;AAFJ,qBAAT;AAIH,iBALD,MAKO;AACH,wBAAI6B,OAAOP,oBAAoBQ,GAA/B;AACA,wBAAIC,OAAOT,oBAAoBU,GAA/B;AACA,wBAAIC,OAAOV,qBAAqBO,GAAhC;AACA,wBAAII,OAAOX,qBAAqBS,GAAhC;AACA,wBAAIG,WAAWvD,QAAQ,EAAEwD,KAAKP,IAAP,EAAaQ,KAAKN,IAAlB,EAAR,EAAkC,EAAEK,KAAKH,IAAP,EAAaI,KAAKH,IAAlB,EAAlC,CAAf;AACAhD,wBAAIY,IAAJ,CAAS;AACLC,+BAAO,CADF;AAELC,iCAAS,qCAFJ;AAGLN,8BAAMyC;AAHD,qBAAT;AAKH;AACJ;AACJ,SAnCD;AAoCH,KA5EY;AA6EbG,2BAAuB,+BAACrD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,6BAAG0B,QAAH,CAAYhC,YAAZ,EAA0B,UAACY,GAAD,EAAMC,IAAN,EAAe;AACrC,gBAAID,GAAJ,EAASN,KAAKM,GAAL,EAAT,KACK;AACD,oBAAI8C,eAAetD,IAAIK,KAAJ,CAAUkD,aAA7B;AACA,oBAAIC,kBAAkB3B,KAAKC,KAAL,CAAWrB,IAAX,CAAtB;AACA,oBAAIgD,aAAJ;AACA,iCAAEjB,OAAF,CAAUgB,eAAV,EAA2B,UAASE,YAAT,EAAuB;AAC9C,wBAAIC,gBAAgBD,aAAaE,YAAjC;AACA,wBAAID,iBAAiBL,YAArB,EAAmC;AAC/BG,wCAAgBC,YAAhB;AACH;AACJ,iBALD;AAMA,oBAAI,CAACD,aAAL,EAAoB;AAChBxD,wBAAIY,IAAJ,CAAS;AACLC,+BAAO,CADF;AAELC,iCAAS;AAFJ,qBAAT;AAIH,iBALD,MAKO;AACH,wBAAI6B,OAAOa,cAAcZ,GAAzB;AACA,wBAAIC,OAAOW,cAAcV,GAAzB;AACA,wBAAIC,IAAJ;AACA,wBAAIC,IAAJ;AACA,wBAAIY,oBAAoB,EAAxB;AACA,qCAAErB,OAAF,CAAUgB,eAAV,EAA2B,UAASE,YAAT,EAAuB;AAC9C,4BAAIC,gBAAgBD,aAAaE,YAAjC;AACA,4BAAID,iBAAiBL,YAArB,EAAmC;AAC/BN,mCAAOU,aAAab,GAApB;AACAI,mCAAOS,aAAaX,GAApB;AACA,gCAAIG,WAAWvD,QAAQ,EAAEwD,KAAKP,IAAP,EAAaQ,KAAKN,IAAlB,EAAR,EAAkC,EAAEK,KAAKH,IAAP,EAAaI,KAAKH,IAAlB,EAAlC,CAAf;AACAS,yCAAaR,QAAb,GAAwBA,WAAW,CAAnC;AACAW,8CAAkBC,IAAlB,CAAuBJ,YAAvB;AACH;AACJ,qBATD;AAUA,wBAAIK,gBAAgBF,kBAAkBG,IAAlB,CAAuB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACtD,+BAAOD,EAAEf,QAAF,GAAagB,EAAEhB,QAAtB;AACH,qBAFmB,EAEjBiB,KAFiB,CAEX,CAFW,EAER,CAFQ,CAApB;AAGAlE,wBAAIY,IAAJ,CAAS;AACLC,+BAAO,CADF;AAELC,iCAAS,oBAFJ;AAGLN,8BAAMsD;AAHD,qBAAT;AAKH;AACJ;AACJ,SA3CD;AA4CH;AA1HY,CAAjB","file":"alaska_airports.js","sourcesContent":["import _ from 'lodash';\nimport fs from \"file-system\";\nimport radians from 'degrees-radians';\nimport db from '../db.js';\nimport jwt from 'jsonwebtoken';\nimport passport from 'passport';\nvar config = require('../middleware/config');\nvar auth = require('../middleware/authantication.js');\nvar geodist = require('geodist')\nvar file_details = 'alaska_airports_II.json'\nmodule.exports = {\n    register_user: (req, res, next) => {\n        var detail = new db.register_user({\n            username: req.query.username,\n            password: req.query.password\n        })\n        detail.save(function(err, data) {\n            if (err) {\n                console.log(err)\n                res.status(400).json({ error: 1, message: \"couldn't register\" });\n            } else\n                res.json({ error: 0, message: \"user registered\", data: data })\n        })\n    },\n    login: (req, res, next) => {\n        db.register_user.findOne({ username: req.query.username, password: req.query.password }, function(err, users_data) {\n            if (err) {\n                res.status(400).json({ error: 1, message: \"check email or password\" });\n            } else if (users_data) {\n                var payload = { id: users_data._id };\n                var token = jwt.sign(payload, config.secret);\n                res.json({ message: \"token generated\", token: token });\n            } else {\n                res.json({ error: 1, message: \"ivalid user ! get registered!\" })\n            }\n        });\n    },\n    get_airports: (req, res, next) => {\n        console.log(req.headers.Autherization)\n        fs.readFile(file_details, (err, data) => {\n            if (err) next(err);\n            res.json({\n                error: 0,\n                message: \"all airport list\",\n                data: JSON.parse(data)\n            });\n        });\n    },\n    find_distance: (req, res, next) => {\n        let response;\n        fs.readFile(file_details, (err, data) => {\n            if (err) next(err);\n            else {\n                var airport_one_location = req.query.airport_location_one;\n                var airport_two_location = req.query.airport_location_two;\n                var found_first_airport;\n                var found_second_airport;\n                var airports_details = JSON.parse(data);\n                _.forEach(airports_details, function(airport) {\n                    var airport_location = airport.LocationID;\n                    if (airport_location == airport_one_location) {\n                        found_first_airport = airport;\n                    }\n                    if (airport_location == airport_two_location) {\n                        found_second_airport = airport;\n                    }\n                })\n                if (!found_first_airport || !found_second_airport) {\n                    res.json({\n                        error: 1,\n                        message: \"airport not found\",\n                    })\n                } else {\n                    var lat1 = found_first_airport.Lat;\n                    var lon1 = found_first_airport.Lon;\n                    var lat2 = found_second_airport.Lat;\n                    var lon2 = found_second_airport.Lon;\n                    var distance = geodist({ lat: lat1, lon: lon1 }, { lat: lat2, lon: lon2 });\n                    res.json({\n                        error: 0,\n                        message: \"distance found between two airports\",\n                        data: distance\n                    });\n                }\n            }\n        });\n    },\n    three_nearest_airport: (req, res, next) => {\n        fs.readFile(file_details, (err, data) => {\n            if (err) next(err);\n            else {\n                var airport_name = req.query.fecility_name;\n                var airport_details = JSON.parse(data);\n                var found_airport;\n                _.forEach(airport_details, function(airport_data) {\n                    var Facility_Name = airport_data.FacilityName;\n                    if (Facility_Name == airport_name) {\n                        found_airport = airport_data;\n                    }\n                })\n                if (!found_airport) {\n                    res.json({\n                        error: 1,\n                        message: \"airport not found\",\n                    })\n                } else {\n                    var lat1 = found_airport.Lat;\n                    var lon1 = found_airport.Lon;\n                    var lat2;\n                    var lon2;\n                    var airports_distance = [];\n                    _.forEach(airport_details, function(airport_data) {\n                        var Facility_Name = airport_data.FacilityName;\n                        if (Facility_Name != airport_name) {\n                            lat2 = airport_data.Lat\n                            lon2 = airport_data.Lon\n                            var distance = geodist({ lat: lat1, lon: lon1 }, { lat: lat2, lon: lon2 });\n                            airport_data.distance = distance * 1;\n                            airports_distance.push(airport_data);\n                        }\n                    })\n                    var nearest_three = airports_distance.sort(function(a, b) {\n                        return a.distance - b.distance;\n                    }).slice(0, 3);\n                    res.json({\n                        error: 0,\n                        message: \"3 nearest airports\",\n                        data: nearest_three\n                    })\n                }\n            }\n        })\n    }\n}"]}